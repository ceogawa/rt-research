// determine k (number of nearest neighbors to check) by using min_pts
    int k = (min_pts < 2) ? 2 : min_pts;
    // init k distances with number of points in kd tree
    std::vector<float> k_distances(n_points);
    for (size_t i = 0; i < n_points; ++i)
    {
        // inits matches.first to index
        std::vector<std::pair<size_t, float>> matches(k + 1);
        float query_pt[n_cols];
        const float* pt = adapt.elem_ptr(i);

        for (size_t dim = 0; dim < n_cols; ++dim)
        {
            query_pt[dim] = pt[dim];
        }

        index.knnSearch(query_pt, k + 1, &matches[0].first, &matches[0].second);
        k_distances[i] = matches[k].second;  // k-th nearest neighbor distance

    }

    // sort from nearest to farthest distance
    std::sort(k_distances.begin(), k_distances.end());
    float percentile = .9;
    size_t idx = static_cast<size_t>(percentile * k_distances.size());
    // eps = k_distances[k_distances.size()-2];
    eps = std::sqrt(k_distances[idx]); 
    for(size_t j = 0; j < k_distances.size(); j++){
        cout << "k distance: " << k_distances[j] << endl;
    }
    cout << "epsilon: " << eps << endl;
    